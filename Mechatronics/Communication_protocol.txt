DESCRIPTION OF THE PROTOCOL

Every message should be enclosed by an initator and a terminator character


1.- 0 should be interpreted as a null terminator always, henceforth no 0's other than null
    characters should be used in the implementation. This is so because characters of 0 are to be
    interpreted as null characters and as such might notify there are no more characters to be
    parsed or buffered. In this way compatibility and reliability is assured with different
    possible implementations.

2.- Character initiator and terminator:
    There should be a character at the beginning and end of each 20 bytes ble payload as to indicate
    where the message begins and ends. This is so if the central or peripheral would be using
    a protocol which provides a uart like service with no delimitation of what each 20 bytes payload
    both devices could still interpretate what the intended message is.

    These initator/terminator characters should have a binary representation different than any value
    which may appear in the payload, this is so because payload can be interpreted as a terminator 
    character and end parsing prematurely. To ensure this, every byte should be encoded with
    a special format which differentiates wheter bytes are initiator/terminator related or data 
    related, the first bit with a value of 1 may be used for data types and with a value of 0 for
    initiator/terminator types. This would effectively reduce the amount of data that can be sent per
    byte to just 2^7. Shall a number bigger than 2^7 be sent this number might be split each 7 bits
    and encoded according to the just mentioned rule.

3.- The first byte after the initiator character should be the message type which values are to be
    interpreted with a clear division between central message types and peripheral message types as
    for if there is a mechanism which notifies every characteristic value change without
    distinguishing wheter that change is due to own made writing of the characteristic or due to
    external writing whoever reads the payload (message) can know wheter that change is due to its
    own or external actions.

    Central message types should not be written by the central, only by the
    periphereal and viceversa with peripheareal message types, in this way directionality is
    achieved, eg: Should a message be received with a central code in the central then the message
    can be excluded and be assumed as a notification of own central actions, the same behaviour
    would be expected with the periphereal.

The specific implementation of this protocol is made with:

2.- 7C as the initiator and terminator character
3.- 0 to 63 are chosen as encoder (periphereal) values, 64 to 127 are chosen as app (central)
    values
    
    

Central application example:
Started discovery
Added device  "00:1E:C0:42:01:29"
Calling appending
create() calling: Index row: -1
Index is not valid: Appending
Stopped discovery
Scan finished
Connecting to  "VBT"  with address:  "00:1E:C0:42:01:29"
Device is connected
Encoder service discovered.
Encoder service created.
Discovering details!
Activating notifications
"7c830f227c"
Notifications activated
Start Sended
"7c01013302027c"
"7c827c"
Stop Sended
"7c027c"
"7c847c"
"7c830f227c"
Start Sended
"7c01013302027c"
"7c827c"
"7c81011d0037004d7c"
"7c8100f5004d006d7c"
"7c81010d0052007b7c"
Stop Sended
"7c027c"
"7c847c"
"7c830f207c"
Device is disconnected
    
